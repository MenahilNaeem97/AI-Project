{"cells":[{"cell_type":"markdown","metadata":{"id":"Wf5KrEb6vrkR"},"source":["# Welcome to Colab!\n","\n","## Explore the Gemini API\n","The Gemini API gives you access to Gemini models created by Google DeepMind. Gemini models are built from the ground up to be multimodal, so you can reason seamlessly across text, images, code, and audio.\n","\n","**How to get started?**\n","*  Go to [Google AI Studio](https://aistudio.google.com/) and log in with your Google account.\n","*  [Create an API key](https://aistudio.google.com/app/apikey).\n","* Use a quickstart for [Python](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/quickstarts/Get_started.ipynb), or call the REST API using [curl](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/quickstarts/rest/Prompting_REST.ipynb).\n","\n","**Discover Gemini's advanced capabilities**\n","*  Play with Gemini [multimodal outputs](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/quickstarts/Image-out.ipynb), mixing text and images in an iterative way.\n","*  Discover the [multimodal Live API](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/quickstarts/Get_started_LiveAPI.ipynb ) (demo [here](https://aistudio.google.com/live)).\n","*  Learn how to [analyze images and detect items in your pictures](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/quickstarts/Spatial_understanding.ipynb\") using Gemini (bonus, there's a [3D version](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/examples/Spatial_understanding_3d.ipynb) as well!).\n","*  Unlock the power of [Gemini thinking model](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/quickstarts/Get_started_thinking.ipynb), capable of solving complex task with its inner thoughts.\n","      \n","**Explore complex use cases**\n","*  Use [Gemini grounding capabilities](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/examples/Search_grounding_for_research_report.ipynb) to create a report on a company based on what the model can find on internet.\n","*  Extract [invoices and form data from PDF](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/examples/Pdf_structured_outputs_on_invoices_and_forms.ipynb) in a structured way.\n","*  Create [illustrations based on a whole book](https://colab.research.google.com/github/google-gemini/cookbook/blob/main/examples/Book_illustration.ipynb) using Gemini large context window and Imagen.\n","\n","To learn more, check out the [Gemini cookbook](https://github.com/google-gemini/cookbook) or visit the [Gemini API documentation](https://ai.google.dev/docs/).\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"oLOM4Wsxkwab"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9464,"status":"ok","timestamp":1747155743972,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"6p7qZxn8xzE4","outputId":"54c5addb-8ecb-4404-96c3-67ca89671797"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting streamlit\n","  Downloading streamlit-1.45.1-py3-none-any.whl.metadata (8.9 kB)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n","Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n","Collecting watchdog<7,>=2.1.5 (from streamlit)\n","  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n","  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.38.2)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n","Downloading streamlit-1.45.1-py3-none-any.whl (9.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m57.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m98.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n","Successfully installed pydeck-0.9.1 streamlit-1.45.1 watchdog-6.0.0\n","Collecting pyngrok\n","  Downloading pyngrok-7.2.8-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n","Downloading pyngrok-7.2.8-py3-none-any.whl (25 kB)\n","Installing collected packages: pyngrok\n","Successfully installed pyngrok-7.2.8\n"]}],"source":["!pip install streamlit\n","!pip install pyngrok\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4ajm71sOyEv_"},"outputs":[],"source":["from pyngrok import ngrok, conf\n","\n","# Set your ngrok Authtoken (copy it from ngrok dashboard)\n","conf.get_default().auth_token = \"2wH2ZVvM4MEUWHSRmpKsV8ZW8yG_2YjnsUHKSpyvdf1amKqxW\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":106,"status":"ok","timestamp":1747155752511,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"UF7BjI4pyKo1","outputId":"f5c8465a-1aa6-4bf8-8567-880988ed738f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Writing app.py\n"]}],"source":["%%writefile app.py\n","import streamlit as st\n","\n","# Title of the app\n","st.title(\"🎬 Movie Recommendation & Sentiment Analysis AI\")\n","\n","# Sidebar\n","st.sidebar.header(\"User Input\")\n","\n","# Mood Selection\n","mood = st.sidebar.selectbox(\n","    \"Select Your Current Mood:\",\n","    (\"Happy\", \"Sad\", \"Angry\", \"Annoyed\", \"Cheerful\")\n",")\n","\n","# Weather Selection\n","weather = st.sidebar.selectbox(\n","    \"Select Current Weather:\",\n","    (\"Sunny\", \"Cold\", \"Snowy\", \"Rainy\", \"Thunderstorm\", \"Hot\")\n",")\n","\n","# Review Text Input\n","review_text = st.text_area(\"Enter Your Movie Review Here:\", \"\")\n","\n","# Buttons\n","recommend_button = st.button(\"🎥 Get Movie Recommendations\")\n","sentiment_button = st.button(\"🧠 Analyze Sentiment\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1240,"status":"ok","timestamp":1747155759498,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"M-dpTtKYzBiw","outputId":"1b9a444f-9725-4d86-bf5d-3eded8202459"},"outputs":[{"output_type":"stream","name":"stdout","text":["Authtoken saved to configuration file: /root/.config/ngrok/ngrok.yml\n"]}],"source":["!ngrok config add-authtoken 2wH2ZVvM4MEUWHSRmpKsV8ZW8yG_2YjnsUHKSpyvdf1amKqxW"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":48019,"status":"ok","timestamp":1747155930153,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"U0J-idV1zGqu","outputId":"eaaf0188-bc60-4f5d-d130-0b2bbcef2e95"},"outputs":[{"output_type":"stream","name":"stdout","text":["Streamlit app URL: NgrokTunnel: \"https://d4a8-35-237-16-23.ngrok-free.app\" -> \"http://localhost:8501\"\n","\n","Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n","\u001b[0m\n","\u001b[0m\n","\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n","\u001b[0m\n","\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8501\u001b[0m\n","\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.12:8501\u001b[0m\n","\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://35.237.16.23:8501\u001b[0m\n","\u001b[0m\n","\u001b[31m──\u001b[0m\u001b[31m────────────────────────\u001b[0m\u001b[31m \u001b[0m\u001b[1;31mTraceback \u001b[0m\u001b[1;2;31m(most recent call last)\u001b[0m\u001b[31m \u001b[0m\u001b[31m─────────────────────────\u001b[0m\u001b[31m──\u001b[0m\n","\u001b[31m \u001b[0m \u001b[2;33m/usr/local/lib/python3.11/dist-packages/streamlit/runtime/scriptrunner/\u001b[0m\u001b[1;33mexec_code.py\u001b[0m: \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m \u001b[94m121\u001b[0m in \u001b[92mexec_func_with_error_handling\u001b[0m                                                 \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m                                                                                      \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m \u001b[2;33m/usr/local/lib/python3.11/dist-packages/streamlit/runtime/scriptrunner/\u001b[0m\u001b[1;33mscript_runner\u001b[0m \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m \u001b[1;33m.py\u001b[0m:\u001b[94m645\u001b[0m in \u001b[92mcode_to_exec\u001b[0m                                                              \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m                                                                                      \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m \u001b[2;33m/content/\u001b[0m\u001b[1;33mapp.py\u001b[0m:\u001b[94m7\u001b[0m in \u001b[92m<module>\u001b[0m                                                        \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m                                                                                      \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m   \u001b[2m  4 \u001b[0m\u001b[94mimport\u001b[0m\u001b[90m \u001b[0m\u001b[4;96mpickle\u001b[0m                                                                  \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m   \u001b[2m  5 \u001b[0m\u001b[94mfrom\u001b[0m\u001b[90m \u001b[0m\u001b[4;96msklearn\u001b[0m\u001b[4;96m.\u001b[0m\u001b[4;96mmetrics\u001b[0m\u001b[4;96m.\u001b[0m\u001b[4;96mpairwise\u001b[0m\u001b[90m \u001b[0m\u001b[94mimport\u001b[0m cosine_similarity                         \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m   \u001b[2m  6 \u001b[0m\u001b[94mfrom\u001b[0m\u001b[90m \u001b[0m\u001b[4;96msklearn\u001b[0m\u001b[4;96m.\u001b[0m\u001b[4;96mfeature_extraction\u001b[0m\u001b[4;96m.\u001b[0m\u001b[4;96mtext\u001b[0m\u001b[90m \u001b[0m\u001b[94mimport\u001b[0m TfidfVectorizer                    \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m \u001b[31m❱ \u001b[0m  7 \u001b[1;4;94mfrom\u001b[0m\u001b[1;4;90m \u001b[0m\u001b[1;4;96mtmdbv3api\u001b[0m\u001b[1;4;90m \u001b[0m\u001b[1;4;94mimport\u001b[0m\u001b[1;4m TMDb, Movie\u001b[0m                                              \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m   \u001b[2m  8 \u001b[0m                                                                               \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m   \u001b[2m  9 \u001b[0m\u001b[2m# ✅ Page Configuration\u001b[0m                                                        \u001b[31m \u001b[0m\n","\u001b[31m \u001b[0m   \u001b[2m 10 \u001b[0mst.set_page_config(                                                            \u001b[31m \u001b[0m\n","\u001b[31m────────────────────────────────────────────────────────────────────────────────────────\u001b[0m\n","\u001b[1;91mModuleNotFoundError: \u001b[0mNo module named \u001b[32m'tmdbv3api'\u001b[0m\n","\u001b[34m  Stopping...\u001b[0m\n"]}],"source":["from pyngrok import ngrok, conf\n","\n","# Set your authtoken directly\n","conf.get_default().auth_token = \"2wH2ZVvM4MEUWHSRmpKsV8ZW8yG_2YjnsUHKSpyvdf1amKqxW\"\n","\n","!pkill streamlit\n","\n","# Start the tunnel\n","public_url = ngrok.connect(8501)\n","print(\"Streamlit app URL:\", public_url)\n","\n","# Launch Streamlit app\n","!streamlit run app.py &"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":579,"status":"ok","timestamp":1747155939806,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"f4q73zwVzLYw","outputId":"e9cfc02a-0fc6-4fe2-ee1b-aaa6dcb63f9a"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Movie TF-IDF vectorizer trained and saved.\n"]}],"source":["import pandas as pd\n","import pickle\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","# Load movies dataset\n","movies_data = pd.read_csv(\"movies_updated.csv\")\n","\n","# Fill missing values\n","selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']\n","for feature in selected_features:\n","    movies_data[feature] = movies_data[feature].fillna('')\n","\n","# Combine all features into one string\n","combined_features = movies_data['genres'] + ' ' + movies_data['keywords'] + ' ' + movies_data['tagline'] + ' ' + movies_data['cast'] + ' ' + movies_data['director']\n","\n","# Vectorize\n","tfidf_vectorizer_movies = TfidfVectorizer(max_features=5000)\n","movie_feature_vectors = tfidf_vectorizer_movies.fit_transform(combined_features)\n","\n","# Save vectorizer for recommendation use\n","with open(\"movie_tfidf_vectorizer.pkl\", \"wb\") as f:\n","    pickle.dump(tfidf_vectorizer_movies, f)\n","\n","# Optional: save movie vectors too (if needed later)\n","with open(\"movie_feature_vectors.pkl\", \"wb\") as f:\n","    pickle.dump(movie_feature_vectors, f)\n","\n","print(\"✅ Movie TF-IDF vectorizer trained and saved.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":564,"status":"ok","timestamp":1747155786109,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"9La03DDczTOn","outputId":"b9d5169d-8d5a-41f3-ddf7-280f0ba1440f"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Sentiment model trained and saved.\n"]}],"source":["import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.svm import SVC\n","import pickle\n","\n","# Load labeled reviews\n","df = pd.read_csv(\"sentiment_reviews_5k.csv\")\n","\n","# Clean text\n","df['review'] = df['review'].astype(str).fillna('').str.lower()\n","\n","# Vectorize\n","tfidf_vectorizer_sentiment = TfidfVectorizer(max_features=5000)\n","X = tfidf_vectorizer_sentiment.fit_transform(df['review'])\n","y = df['label']\n","\n","# Train SVM model\n","svm_model = SVC(kernel='linear', probability=True)\n","svm_model.fit(X, y)\n","\n","# Save sentiment model and vectorizer\n","with open(\"tfidf_vectorizer.pkl\", \"wb\") as f:\n","    pickle.dump(tfidf_vectorizer_sentiment, f)\n","\n","with open(\"svm_model.pkl\", \"wb\") as f:\n","    pickle.dump(svm_model, f)\n","\n","print(\"✅ Sentiment model trained and saved.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"executionInfo":{"elapsed":37,"status":"error","timestamp":1747155947104,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"CIee_Ffnssr-","outputId":"797b3792-9960-4596-cf39-330e1c43d588"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'X_test' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-6cb541d24b69>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# ▶️ Predict using your model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msvm_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# ✅ Classification Report\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X_test' is not defined"]}],"source":["from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# ▶️ Predict using your model\n","y_pred = svm_model.predict(X_test)\n","\n","# ✅ Classification Report\n","report = classification_report(y_test, y_pred, target_names=[\"Negative\", \"Positive\"], output_dict=True)\n","df_report = pd.DataFrame(report).transpose()\n","\n","# ✅ Accuracy Score\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","# 📊 Confusion Matrix\n","cm = confusion_matrix(y_test, y_pred)\n","labels = ['Negative', 'Positive']\n","\n","# ✅ Print Scores\n","print(\"Accuracy:\", accuracy)\n","print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred, target_names=labels))\n","\n","# 📈 Plot Confusion Matrix\n","plt.figure(figsize=(6,4))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=labels, yticklabels=labels)\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n","\n","# 🧾 Show metrics as table (Jupyter or Streamlit)\n","try:\n","    import streamlit as st\n","    st.subheader(\"📊 Model Evaluation Metrics\")\n","    st.dataframe(df_report.round(3))\n","except:\n","    display(df_report.round(3))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"executionInfo":{"elapsed":41,"status":"error","timestamp":1747155867842,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"Cm5N0u7vuANd","outputId":"115c3e85-d953-471b-8ea7-4ee08e651138"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'y_test' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-8f9e0592af37>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# ✅ Calculate metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprecision\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprecision_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mrecall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecall_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"]}],"source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","import matplotlib.pyplot as plt\n","\n","# ✅ Calculate metrics\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","\n","# ✅ Plotting\n","metrics = ['Accuracy', 'Precision', 'Recall', 'F1']\n","values = [accuracy, precision, recall, f1]\n","\n","plt.figure(figsize=(8, 5))\n","bars = plt.bar(metrics, values, color=['green', 'orange', 'blue', 'purple'])\n","\n","# Add labels above bars\n","for bar in bars:\n","    height = bar.get_height()\n","    plt.annotate(f'{height:.2f}',\n","                 xy=(bar.get_x() + bar.get_width() / 2, height),\n","                 xytext=(0, 3),\n","                 textcoords=\"offset points\",\n","                 ha='center', va='bottom', fontsize=14)\n","\n","plt.ylim(0, 1.1)\n","plt.title('Model Performance Measures')\n","plt.ylabel('Score')\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3162,"status":"ok","timestamp":1747124019299,"user":{"displayName":"Yashfa Naeem","userId":"12417155227772027907"},"user_tz":-300},"id":"eXakphoQzedY","outputId":"b7676394-94a1-4b2c-c1bc-bfa4125b05f2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting tmdbv3api\n","  Downloading tmdbv3api-1.9.0-py3-none-any.whl.metadata (8.0 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from tmdbv3api) (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->tmdbv3api) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->tmdbv3api) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->tmdbv3api) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->tmdbv3api) (2025.4.26)\n","Downloading tmdbv3api-1.9.0-py3-none-any.whl (25 kB)\n","Installing collected packages: tmdbv3api\n","Successfully installed tmdbv3api-1.9.0\n"]}],"source":["!pip install tmdbv3api"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":184,"status":"error","timestamp":1747155822497,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"ClACeCqtziEi","colab":{"base_uri":"https://localhost:8080/","height":385},"outputId":"727f21fe-a337-48d0-99b6-0eef289ef14d"},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'tmdbv3api'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-70520cdb4213>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtmdbv3api\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTMDb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMovie\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtmdb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTMDb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtmdb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapi_key\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'1aef21cf9efc0980f48ce4559cdcdee9'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtmdb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlanguage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'en'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'tmdbv3api'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["from tmdbv3api import TMDb, Movie\n","\n","tmdb = TMDb()\n","tmdb.api_key = '1aef21cf9efc0980f48ce4559cdcdee9'\n","tmdb.language = 'en'\n","tmdb.debug = True\n","\n","movie_search = Movie()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":107,"status":"ok","timestamp":1747155830812,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"ai8rXaNbohHS","outputId":"a5c57fb7-3ddd-4aa5-e919-cb26e6c18080"},"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting app.py\n"]}],"source":["%%writefile app.py\n","import streamlit as st\n","import numpy as np\n","import pandas as pd\n","import pickle\n","from sklearn.metrics.pairwise import cosine_similarity\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from tmdbv3api import TMDb, Movie\n","\n","# ✅ Page Configuration\n","st.set_page_config(\n","    page_title=\"Movie Recommendation & Sentiment AI 🎬🧠\",\n","    page_icon=\"🎥\",\n","    layout=\"wide\",\n","    initial_sidebar_state=\"expanded\"\n",")\n","\n","# ✅ START SCREEN\n","if \"started\" not in st.session_state:\n","    st.session_state.started = False\n","\n","if not st.session_state.started:\n","    st.title(\"🎬 Welcome to the Movie Recommendation & Sentiment Analysis AI App\")\n","    st.markdown(\"This AI tool recommends movies based on your mood and analyzes the sentiment of your reviews.\")\n","    if st.button(\"🚀 Start\"):\n","        st.session_state.started = True\n","        st.rerun()\n","    st.stop()\n","\n","# ✅ TMDB Setup\n","tmdb = TMDb()\n","tmdb.api_key = '1aef21cf9efc0980f48ce4559cdcdee9'  # Replace with your TMDb key\n","tmdb.language = 'en'\n","tmdb.debug = True\n","movie_search = Movie()\n","\n","# ✅ Main Title\n","st.title(\"🎬 Movie Recommendation & Sentiment Analysis\")\n","st.markdown(\"---\")\n","\n","# ✅ Sidebar Input\n","st.sidebar.header(\"💬 User Input\")\n","mood = st.sidebar.selectbox(\"🌈 Select Your Current Mood:\", (\"Happy\", \"Sad\", \"Angry\", \"Annoyed\", \"Cheerful\"))\n","audience = st.sidebar.selectbox(\"👥 With Whom Are You Watching?\", (\"Friends\", \"Family\", \"Parents\", \"Siblings\", \"Kids\"))\n","review_text = st.sidebar.text_area(\"📝 Enter Your Movie Review Here:\")\n","recommend_button = st.sidebar.button(\"🎥 Get Movie Recommendations\")\n","sentiment_button = st.sidebar.button(\"🧠 Analyze Sentiment\")\n","\n","# ✅ Load Data and Model\n","movies_data = pd.read_csv('/content/movies_updated.csv')\n","with open('tfidf_vectorizer.pkl', 'rb') as f:\n","    tfidf_vectorizer = pickle.load(f)\n","with open('svm_model.pkl', 'rb') as f:\n","    svm_model = pickle.load(f)\n","\n","# ✅ Feature Preparation\n","selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']\n","for feature in selected_features:\n","    movies_data[feature] = movies_data[feature].fillna('')\n","combined_features = movies_data['genres'] + ' ' + movies_data['keywords'] + ' ' + movies_data['tagline'] + ' ' + movies_data['cast'] + ' ' + movies_data['director']\n","feature_vectors = tfidf_vectorizer.transform(combined_features)\n","\n","# ✅ Keywords for Search\n","mood_keywords = {\n","    'Happy': 'comedy love family friendship adventure fun',\n","    'Sad': 'drama loss tragedy emotional relationship',\n","    'Angry': 'action revenge crime fight war thriller',\n","    'Annoyed': 'funny comedy light-hearted chill relaxing',\n","    'Cheerful': 'fantasy animation musical magical uplifting'\n","}\n","audience_keywords = {\n","    'Friends': 'fun adventure comedy thriller',\n","    'Family': 'animation family-friendly warm uplifting',\n","    'Parents': 'drama classic romance emotional',\n","    'Siblings': 'fantasy action cool fun',\n","    'Kids': 'animation fun kids-friendly educational'\n","}\n","\n","# ✅ Recommendation Section\n","if recommend_button:\n","    st.subheader(\"🎥 Top Movie Recommendations Based on Your Mood and Company:\")\n","    st.markdown(\"---\")\n","\n","    mood_query = mood_keywords.get(mood, '')\n","    audience_query = audience_keywords.get(audience, '')\n","    combined_query = mood_query + ' ' + audience_query\n","\n","    query_vector = tfidf_vectorizer.transform([combined_query])\n","    similarity = cosine_similarity(query_vector, feature_vectors)\n","\n","    top_30_idx = similarity[0].argsort()[::-1][:30]\n","    top_movies_idx = np.random.choice(top_30_idx, 10, replace=False)\n","\n","    for idx in top_movies_idx:\n","        movie = movies_data.iloc[idx]\n","        movie_title = movie['title']\n","\n","        # Poster\n","        search_result = movie_search.search(movie_title)\n","        if search_result:\n","            poster_path = search_result[0].poster_path\n","            if poster_path:\n","                poster_url = f\"https://image.tmdb.org/t/p/w500{poster_path}\"\n","                st.image(poster_url, width=150)\n","            else:\n","                st.write(\"🎞️ Poster not available\")\n","        else:\n","            st.write(\"🎞️ Poster not available\")\n","\n","        # Details\n","        st.markdown(f\"**🎬 {movie_title}**\")\n","        if 'vote_average' in movie:\n","            st.write(f\"⭐ Rating: {movie['vote_average']} / 10\")\n","\n","        st.write(f\"📅 Release Date: {movie['release_date']}\")\n","        st.write(f\"🎭 Genres: {movie['genres']}\")\n","        st.write(f\"📜 Overview: {movie['overview']}\")\n","        st.markdown(\"---\")\n","\n","# ✅ Sentiment Analysis Section\n","if sentiment_button:\n","    st.subheader(\"🧠 Sentiment Analysis of Your Review:\")\n","    st.markdown(\"---\")\n","    if review_text.strip() == \"\":\n","        st.warning(\"⚠️ Please enter a review first!\")\n","    else:\n","        review_vector = tfidf_vectorizer.transform([review_text])\n","        sentiment = svm_model.predict(review_vector)[0]\n","        if sentiment == 1:\n","            st.success(\"🟢 Positive Review! Great choice!\")\n","        else:\n","            st.error(\"🔴 Negative Review. Maybe not the best movie!\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1747155840546,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"HNRuIm-35cHP","outputId":"2e66fb94-a8d4-471b-a5bf-28b93b71f922"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Confirmed good reviews added: 9\n"]}],"source":["# ✅ Add positive and negative examples with the word \"good\"\n","manual_data = pd.DataFrame({\n","    \"review\": [\n","        \"good\", \"very good\",\"very nice\",\"nice\", \"this was a good movie\", \"really good acting\", \"a pretty good film\",\n","        \"not good\", \"barely good\",  \"not nice\", \"good but boring\", \"only good in parts\"\n","    ],\n","    \"label\": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n","})\n","\n","# ✅ Add to your existing DataFrame\n","df = pd.concat([df, manual_data], ignore_index=True)\n","\n","print(\"✅ Confirmed good reviews added:\", df[df['review'].str.contains(\"good\", case=False)].shape[0])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":118,"status":"ok","timestamp":1747155847234,"user":{"displayName":"Menahil Naeem","userId":"10577155430548170851"},"user_tz":-300},"id":"A_WxT06Z5eco","outputId":"b75bfd3c-86b5-4615-fe42-83e5406b166c"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Retrained with 'good' included.\n"]}],"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.svm import SVC\n","import pickle\n","\n","df['review'] = df['review'].astype(str).fillna('').str.lower()\n","\n","tfidf = TfidfVectorizer(max_features=5000)\n","X = tfidf.fit_transform(df['review'])\n","y = df['label']\n","\n","model = SVC(kernel='linear', probability=True)\n","model.fit(X, y)\n","\n","with open(\"tfidf_vectorizer.pkl\", \"wb\") as f:\n","    pickle.dump(tfidf, f)\n","\n","with open(\"svm_model.pkl\", \"wb\") as f:\n","    pickle.dump(model, f)\n","\n","print(\"✅ Retrained with 'good' included.\")\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1Nqg6Ls2AN6jQMhu_Fxt_L2oaCwGxCc4U","timestamp":1746555082716},{"file_id":"1k57aAv5uTGIyNmtzq9bdlMBlkQVv7b2m","timestamp":1746214283186},{"file_id":"/v2/external/notebooks/welcome.ipynb","timestamp":1746206500030}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}